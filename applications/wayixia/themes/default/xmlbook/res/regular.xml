<?xml version="1.0" encoding="utf-8"?>
<XMLBOOK>
	<BOOKNAME>正则表达式(Regular Expression)指南</BOOKNAME>
	<AUTHOR>LovelyLife</AUTHOR>
	<PRESS>ONLYAA.COM</PRESS>
	<NAVIGATE></NAVIGATE>
	<PAGES>
		<PAGE PAGENO="0">
			<TITLE>1.引子</TITLE>
			<CONTEXT><![CDATA[<p>目前，正则表达式已经在很多软件中得到广泛的应用，包括*nix（Linux, Unix等），HP等操作系统，PHP，C#，Java等开发环境，以及很多的应用软件中，都可以看到正则表达式的影子。</p><p>　　正则表达式的使用，可以通过简单的办法来实现强大的功能。为了简单有效而又不失强大，造成了正则表达式代码的难度较大，学习起来也不是很容易，所以需要付出一些努力才行，入门之后参照一定的参考，使用起来还是比较简单有效的。</p><blockquote><p>例子：<span style="background-color: #00ffff"> ^.+@.+\\..+$ </span></p></blockquote><p>　　这样的代码曾经多次把我自己给吓退过。可能很多人也是被这样的代码给吓跑的吧。继续阅读本文将让你也可以自由应用这样的代码。</p><p>　　注意：这里的第7部分跟前面的内容看起来似乎有些重复，目的是把前面表格里的部分重新描述了一次，目的是让这些内容更容易理解。</p>]]></CONTEXT>
			<PAGES>
			</PAGES>
		</PAGE>
		<PAGE PAGENO="1">
			<TITLE>2.正则表达式的历史</TITLE>
			<CONTEXT><![CDATA[<p>正则表达式的&ldquo;祖先&rdquo;可以一直上溯至对人类神经系统如何工作的早期研究。Warren McCulloch 和 Walter Pitts 这两位神经生理学家研究出一种数学方式来描述这些神经网络。</p><p>　　1956 年, 一位叫 Stephen Kleene 的数学家在 McCulloch 和 Pitts 早期工作的基础上，发表了一篇标题为&ldquo;神经网事件的表示法&rdquo;的论文，引入了正则表达式的概念。正则表达式就是用来描述他称为&ldquo;正则集的代数&rdquo;的表达式，因此采用&ldquo;正则表达式&rdquo;这个术语。</p><p>　　随后，发现可以将这一工作应用于使用 Ken Thompson 的计算搜索算法的一些早期研究，Ken Thompson 是 Unix 的主要发明人。正则表达式的第一个实用应用程序就是 Unix 中的 <i>qed </i>编辑器。</p><p>　　如他们所说，剩下的就是众所周知的历史了。从那时起直至现在正则表达式都是基于文本的编辑器和搜索工具中的一个重要部分。</p>]]></CONTEXT>
			<PAGES>
			</PAGES>
		</PAGE>
		<PAGE PAGENO="2">
			<TITLE>3.正则表达式定义</TITLE>
			<CONTEXT><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p><blockquote><ul><li><span style="background-color: #ffff00">列目录时，　dir *.txt或ls *.txt中的*.txt就</span><font color="#ff0000"><span style="background-color: #ffff00">不</span></font><span style="background-color: #ffff00">是一个正则表达式,因为这里*与正则式的*的含义是不同的。</span></li></ul></blockquote><p>　　正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为元字符）组成的文字模式。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>]]></CONTEXT>
			<PAGES>
				<PAGE PAGENO="20">
					<TITLE>普通字符</TITLE>
					<CONTEXT><![CDATA[<p>　由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。</p>]]></CONTEXT>
					<PAGES>
					</PAGES>
				</PAGE>
				<PAGE PAGENO="200">
					<TITLE>非打印字符</TITLE>
					<CONTEXT><![CDATA[<table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" style="font-size: 12px">字符</th><th align="left" style="font-size: 12px">含义</th></tr><tr><td style="font-size: 12px">\cx</td><td style="font-size: 12px">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td></tr><tr><td style="font-size: 12px">\f</td><td style="font-size: 12px">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="font-size: 12px">\n</td><td style="font-size: 12px">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="font-size: 12px">\r</td><td style="font-size: 12px">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="font-size: 12px">\s</td><td style="font-size: 12px">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td style="font-size: 12px">\S</td><td style="font-size: 12px">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="font-size: 12px">\t</td><td style="font-size: 12px">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="font-size: 12px">\v</td><td style="font-size: 12px">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table>]]></CONTEXT>
					<PAGES/></PAGE>
				<PAGE><TITLE>特殊字符</TITLE><CONTEXT><![CDATA[<p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的&quot;*.txt&quot;中的*，简单的说就是表示任何字符串的意思。如果要查找文件名中有＊的文件，则需要对＊进行转义，即在其前加一个\。ls \*.txt。正则表达式有以下特殊字符。</p><p><table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" width="62" style="font-size: 12px">特别字符</th><th align="left" width="688" style="font-size: 12px">说明</th></tr><tr><td style="font-size: 12px">$</td><td style="font-size: 12px">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。</td></tr><tr><td style="font-size: 12px">( )</td><td style="font-size: 12px">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。</td></tr><tr><td style="font-size: 12px">*</td><td style="font-size: 12px">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td></tr><tr><td style="font-size: 12px">+</td><td style="font-size: 12px">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td></tr><tr><td style="font-size: 12px">.</td><td style="font-size: 12px">匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。</td></tr><tr><td style="font-size: 12px">[</td><td style="font-size: 12px">标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td></tr><tr><td style="font-size: 12px">?</td><td style="font-size: 12px">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</td></tr><tr><td style="font-size: 12px">\</td><td style="font-size: 12px">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 &quot;\&quot;，而 '\(' 则匹配 &quot;(&quot;。</td></tr><tr><td style="font-size: 12px">^</td><td style="font-size: 12px">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。</td></tr><tr><td style="font-size: 12px">{</td><td style="font-size: 12px">标记限定符表达式的开始。要匹配 {，请使用 \{。</td></tr><tr><td style="font-size: 12px">|</td><td style="font-size: 12px">指明两项之间的一个选择。要匹配 |，请使用 \|。</td></tr></tbody></table></p><p><strong style="font-weight: 400; background-color: #ffff00">　　构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与操作符将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</strong></p>]]></CONTEXT></PAGE><PAGE><TITLE>限定符</TITLE><CONTEXT><![CDATA[<p>　　 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*或+或?或{n}或{n,}或{n,m}共6种。<br />*、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。<br />　　 正则表达式的限定符有：<br />　</p><p><table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" style="font-size: 12px">字符</th><th align="left" style="font-size: 12px">描述</th></tr><tr><td style="font-size: 12px">*</td><td style="font-size: 12px">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td></tr><tr><td style="font-size: 12px">+</td><td style="font-size: 12px">匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td></tr><tr><td style="font-size: 12px">?</td><td style="font-size: 12px">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 中的&quot;do&quot; 。? 等价于 {0,1}。</td></tr><tr><td style="font-size: 12px">{n}</td><td style="font-size: 12px">n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="font-size: 12px">{n,}</td><td style="font-size: 12px">n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 &quot;Bob&quot; 中的 'o'，但能匹配 &quot;foooood&quot; 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td></tr><tr><td style="font-size: 12px">{n,m}</td><td style="font-size: 12px">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table></p>]]></CONTEXT></PAGE><PAGE><TITLE>定位符</TITLE><CONTEXT><![CDATA[<p>&nbsp;用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\b描述单词的前或后边界，\B表示非单词边界。<font color="#ff0000">不能对定位符使用限定符。</font></p>]]></CONTEXT></PAGE><PAGE><TITLE>选择</TITLE><CONTEXT><![CDATA[<p>&nbsp;用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。<br />　　 其中?:是非捕获元之一，还有两个非捕获元是?=和?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>]]></CONTEXT></PAGE><PAGE><TITLE>后向引用</TITLE><CONTEXT><![CDATA[<p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 '\n' 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。<br />　　 可以使用非捕获元字符 '?:', '?=', or '?!' 来忽略对相关匹配的保存。</p>]]></CONTEXT></PAGE></PAGES>
		</PAGE>
		<PAGE>
			<TITLE>4.各种操作符的运算优先级</TITLE>
			<CONTEXT><![CDATA[<p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。各种操作符的优先级从高到低如下：</p><table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" style="font-size: 12px">操作符</th><th align="left" style="font-size: 12px">描述</th></tr><tr><td style="font-size: 12px">\</td><td style="font-size: 12px">转义符</td></tr><tr><td style="font-size: 12px">(), (?:), (?=), []</td><td style="font-size: 12px">圆括号和方括号</td></tr><tr><td style="font-size: 12px">*, +, ?, {n}, {n,}, {n,m}</td><td style="font-size: 12px">限定符</td></tr><tr><td style="font-size: 12px">^, $, \anymetacharacter</td><td style="font-size: 12px">位置和顺序</td></tr><tr><td style="font-size: 12px">|</td><td style="font-size: 12px">&ldquo;或&rdquo;操作</td></tr></tbody></table><p>&nbsp;</p>]]></CONTEXT>
			<PAGES/></PAGE>
		<PAGE>
			<TITLE>5.全部符号解释</TITLE>
			<CONTEXT><![CDATA[<p><table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" style="font-size: 12px">字符</th><th align="left" style="font-size: 12px">描述</th></tr><tr><td style="font-size: 12px">\</td><td style="font-size: 12px">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 &quot;n&quot;。'\n' 匹配一个换行符。序列 '\\' 匹配 &quot;\&quot; 而 &quot;\(&quot; 则匹配 &quot;(&quot;。</td></tr><tr><td style="font-size: 12px">^</td><td style="font-size: 12px">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。</td></tr><tr><td style="font-size: 12px">$</td><td style="font-size: 12px">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。</td></tr><tr><td style="font-size: 12px">*</td><td style="font-size: 12px">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td></tr><tr><td style="font-size: 12px">+</td><td style="font-size: 12px">匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td></tr><tr><td style="font-size: 12px">?</td><td style="font-size: 12px">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 中的&quot;do&quot; 。? 等价于 {0,1}。</td></tr><tr><td style="font-size: 12px">{n}</td><td style="font-size: 12px">n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="font-size: 12px">{n,}</td><td style="font-size: 12px">n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 &quot;Bob&quot; 中的 'o'，但能匹配 &quot;foooood&quot; 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td></tr><tr><td style="font-size: 12px">{n,m}</td><td style="font-size: 12px">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="font-size: 12px">?</td><td style="font-size: 12px">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，'o+?' 将匹配单个 &quot;o&quot;，而 'o+' 将匹配所有 'o'。</td></tr><tr><td style="font-size: 12px">.</td><td style="font-size: 12px">匹配除 &quot;\n&quot; 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。</td></tr><tr><td style="font-size: 12px">(pattern)</td><td style="font-size: 12px">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0&hellip;$9 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。</td></tr><tr><td style="font-size: 12px">(?:pattern)</td><td style="font-size: 12px">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 &quot;或&quot; 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</td></tr><tr><td style="font-size: 12px">(?=pattern)</td><td style="font-size: 12px">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95|98|NT|2000)' 能匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot; ，但不能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="font-size: 12px">(?!pattern)</td><td style="font-size: 12px">负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不能匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td></tr><tr><td style="font-size: 12px">x|y</td><td style="font-size: 12px">匹配 x 或 y。例如，'z|food' 能匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f)ood' 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td></tr><tr><td style="font-size: 12px">[xyz]</td><td style="font-size: 12px">字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 &quot;plain&quot; 中的 'a'。</td></tr><tr><td style="font-size: 12px">[^xyz]</td><td style="font-size: 12px">负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 &quot;plain&quot; 中的'p'。</td></tr><tr><td style="font-size: 12px">[a-z]</td><td style="font-size: 12px">字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td></tr><tr><td style="font-size: 12px">[^a-z]</td><td style="font-size: 12px">负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td></tr><tr><td style="font-size: 12px">\b</td><td style="font-size: 12px">匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配&quot;never&quot; 中的 'er'，但不能匹配 &quot;verb&quot; 中的 'er'。</td></tr><tr><td style="font-size: 12px">\B</td><td style="font-size: 12px">匹配非单词边界。'er\B' 能匹配 &quot;verb&quot; 中的 'er'，但不能匹配 &quot;never&quot; 中的 'er'。</td></tr><tr><td style="font-size: 12px">\cx</td><td style="font-size: 12px">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td></tr><tr><td style="font-size: 12px">\d</td><td style="font-size: 12px">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="font-size: 12px">\D</td><td style="font-size: 12px">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="font-size: 12px">\f</td><td style="font-size: 12px">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="font-size: 12px">\n</td><td style="font-size: 12px">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="font-size: 12px">\r</td><td style="font-size: 12px">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="font-size: 12px">\s</td><td style="font-size: 12px">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td style="font-size: 12px">\S</td><td style="font-size: 12px">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="font-size: 12px">\t</td><td style="font-size: 12px">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="font-size: 12px">\v</td><td style="font-size: 12px">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td style="font-size: 12px">\w</td><td style="font-size: 12px">匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td></tr><tr><td style="font-size: 12px">\W</td><td style="font-size: 12px">匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td></tr><tr><td style="font-size: 12px">\xn</td><td style="font-size: 12px">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 &quot;A&quot;。'\x041' 则等价于 '\x04' &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。.</td></tr><tr><td style="font-size: 12px">\num</td><td style="font-size: 12px">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td></tr><tr><td style="font-size: 12px">\n</td><td style="font-size: 12px">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td style="font-size: 12px">\nm</td><td style="font-size: 12px">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td style="font-size: 12px">\nml</td><td style="font-size: 12px">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="font-size: 12px">\un</td><td style="font-size: 12px">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table></p>]]></CONTEXT>
		</PAGE>
		<PAGE><TITLE>6.部分例子</TITLE><CONTEXT><![CDATA[<p><table cellspacing="1" cellpadding="3" border="1"><tbody><tr><th align="left" style="font-size: 12px">正则表达式</th><th align="left" style="font-size: 12px">说明</th></tr><tr><td style="font-size: 12px">/\b([a-z]+) \1\b/gi</td><td style="font-size: 12px">一个单词连续出现的位置</td></tr><tr><td style="font-size: 12px">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</td><td style="font-size: 12px">将一个URL解析为协议、域、端口及相对路径</td></tr><tr><td style="font-size: 12px">/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</td><td style="font-size: 12px">定位章节的位置</td></tr><tr><td style="font-size: 12px">/[-a-z]/</td><td style="font-size: 12px">A至z共26个字母再加一个-号。</td></tr><tr><td style="font-size: 12px">/ter\b/</td><td style="font-size: 12px">可匹配chapter，而不能terminal</td></tr><tr><td style="font-size: 12px">/\Bapt/</td><td style="font-size: 12px">可匹配chapter，而不能aptitude</td></tr><tr><td style="font-size: 12px">/Windows(?=95 |98 |NT )/</td><td style="font-size: 12px">可匹配Windows95或Windows98或WindowsNT,当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。</td></tr></tbody></table></p>]]></CONTEXT></PAGE><PAGE><TITLE>7.正则表达式匹配规则</TITLE><CONTEXT><![CDATA[]]></CONTEXT><PAGES><PAGE><TITLE>基本模式匹配</TITLE><CONTEXT><![CDATA[<p>一切从最基本的开始。模式，是正规表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：</p><blockquote><p>^once</p></blockquote><p>　　这个模式包含一个特殊的字符^，表示该模式只匹配那些以once开头的字符串。例如该模式与字符串&quot;once upon a time&quot;匹配，与&quot;There once was a man from NewYork&quot;不匹配。正如如^符号表示开头一样，$符号用来匹配那些以给定模式结尾的字符串。</p><blockquote><p>bucket$</p></blockquote><p>　　这个模式与&quot;Who kept all of this cash in a bucket&quot;匹配，与&quot;buckets&quot;不匹配。字符^和$同时使用时，表示精确匹配（字符串与模式一样）。例如：</p><blockquote><p>^bucket$</p></blockquote><p>　　只匹配字符串&quot;bucket&quot;。如果一个模式不包括^和$，那么它与任何包含该模式的字符串匹配。例如：模式</p><blockquote><p>once</p></blockquote><p>与字符串</p><blockquote><p>There once was a man from NewYork<br />Who kept all of his cash in a bucket.</p></blockquote><p>是匹配的。<br /><br />　　 在该模式中的字母(o-n-c-e)是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠(\)打头。制表符的转义序列是：\t。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：</p><blockquote><p>^\t</p></blockquote><p>类似的，用\n表示&ldquo;新行&rdquo;，\r表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用\\表示，句号.用\.表示，以此类推。<br />&nbsp;</p>]]></CONTEXT></PAGE><PAGE><TITLE>字符簇</TITLE><CONTEXT><![CDATA[<p>在INTERNET的程序中，正规表达式通常用来验证用户的输入。当用户提交一个FORM以后，要判断输入的电话号码、地址、EMAIL地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。<br /><br />所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：</p><blockquote><p>[AaEeIiOoUu]</p></blockquote><p>这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：</p><blockquote><p>[a-z] //匹配所有的小写字母 <br />[A-Z] //匹配所有的大写字母 <br />[a-zA-Z] //匹配所有的字母 <br />[0-9] //匹配所有的数字 <br />[0-9\.\-] //匹配所有的数字，句号和减号 <br />[ \f\r\t\n] //匹配所有的白字符</p></blockquote><p>同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如&quot;z2&quot;、&quot;t6&quot;或&quot;g7&quot;，但不是&quot;ab2&quot;、&quot;r2d3&quot; 或&quot;b52&quot;的话，用这个模式：</p><blockquote><p>^[a-z][0-9]$</p></blockquote><p>尽管[a-z]代表26个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。<br /><br />前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用^是，它表示&ldquo;非&rdquo;或&ldquo;排除&rdquo;的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：</p><blockquote><p>^[^0-9][0-9]$</p></blockquote><p>这个模式与&quot;&amp;5&quot;、&quot;g7&quot;及&quot;-2&quot;是匹配的，但与&quot;12&quot;、&quot;66&quot;是不匹配的。下面是几个排除特定字符的例子：</p><blockquote><p>[^a-z] //除了小写字母以外的所有字符 <br />[^\\\/\^] //除了(\)(/)(^)之外的所有字符 <br />[^\&quot;\'] //除了双引号(&quot;)和单引号(')之外的所有字符</p></blockquote><p>特殊字符&quot;.&quot; (点，句号)在正规表达式中用来表示除了&ldquo;新行&rdquo;之外的所有字符。所以模式&quot;^.5$&quot;与任何两个字符的、以数字5结尾和以其他非&ldquo;新行&rdquo;字符开头的字符串匹配。模式&quot;.&quot;可以匹配任何字符串，除了空串和只包括一个&ldquo;新行&rdquo;的字符串。<br /><br />PHP的正规表达式有一些内置的通用字符簇，列表如下：</p><blockquote><p>字符簇 含义 <br />[[:alpha:]] 任何字母 <br />[[:digit:]] 任何数字 <br />[[:alnum:]] 任何字母和数字 <br />[[:space:]] 任何白字符 <br />[[:upper:]] 任何大写字母 <br />[[:lower:]] 任何小写字母 <br />[[:punct:]] 任何标点符号 <br />[[:xdigit:]] 任何16进制的数字，相当于[0-9a-fA-F]</p></blockquote>]]></CONTEXT></PAGE><PAGE><TITLE>确定重复出现</TITLE><CONTEXT><![CDATA[<p>到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</p><blockquote><p>字符簇 含义 <br />^[a-zA-Z_]$ 所有的字母和下划线 <br />^[[:alpha:]]{3}$ 所有的3个字母的单词 <br />^a$ 字母a <br />^a{4}$ aaaa <br />^a{2,4}$ aa,aaa或aaaa <br />^a{1,3}$ a,aa或aaa <br />^a{2,}$ 包含多于两个a的字符串 <br />^a{2,} 如：aardvark和aaab，但apple不行 <br />a{2,} 如：baad和aaa，但Nantucket不行 <br />\t{2} 两个制表符 <br />.{2} 所有的两个字符</p></blockquote><p>这些例子描述了花括号的三种不同的用法。一个数字，{x}的意思是&ldquo;前面的字符或字符簇只出现x次&rdquo;；一个数字加逗号，{x,}的意思是&ldquo;前面的内容出现x或更多的次数&rdquo;；两个用逗号分隔的数字，{x,y}表示&ldquo;前面的内容至少出现x次，但不超过y次&rdquo;。我们可以把模式扩展到更多的单词或数字：</p><blockquote><p>^[a-zA-Z0-9_]{1,}$ //所有包含一个以上的字母、数字或下划线的字符串 <br />^[0-9]{1,}$ //所有的正数 <br />^\-{0,1}[0-9]{1,}$ //所有的整数 <br />^\-{0,1}[0-9]{0,}\.{0,1}[0-9]{0,}$ //所有的小数</p></blockquote><p>最后一个例子不太好理解，是吗？这么看吧：与所有以一个可选的负号(\-{0,1})开头(^)、跟着0个或更多的数字([0-9]{0,})、和一个可选的小数点(\.{0,1})再跟上0个或多个数字([0-9]{0,})，并且没有其他任何东西($)。下面你将知道能够使用的更为简单的方法。<br /><br />特殊字符&quot;?&quot;与{0,1}是相等的，它们都代表着：&ldquo;0个或1个前面的内容&rdquo;或&ldquo;前面的内容是可选的&rdquo;。所以刚才的例子可以简化为：</p><blockquote><p>^\-?[0-9]{0,}\.?[0-9]{0,}$</p></blockquote><p>特殊字符&quot;*&quot;与{0,}是相等的，它们都代表着&ldquo;0个或多个前面的内容&rdquo;。最后，字符&quot;+&quot;与 {1,}是相等的，表示&ldquo;1个或多个前面的内容&rdquo;，所以上面的4个例子可以写成：</p><blockquote><p>^[a-zA-Z0-9_]+$ //所有包含一个以上的字母、数字或下划线的字符串 <br />^[0-9]+$ //所有的正数 <br />^\-?[0-9]+$ //所有的整数 <br />^\-?[0-9]*\.?[0-9]*$ //所有的小数</p></blockquote><p>当然这并不能从技术上降低正规表达式的复杂性，但可以使它们更容易阅读。</p>]]></CONTEXT></PAGE></PAGES></PAGE><PAGE><TITLE>8.参考文献</TITLE><CONTEXT><![CDATA[<p><a target="_blank" href="http://www.soulogic.com/code/doc/RegularExpressions/">JScript 和 VBScript 正则表达式</a></p><p>微软MSDN上的例子(英文)：</p><p><base target="_top"><table class="clsContainer" cellspacing="0" cellpadding="15" width="100%" border="0" float="left" style="table-layout: fixed"><tbody><tr><td valign="top"><div id="nstext0" valign="bottom"><dl><dt><span class="style1"><a target="_blank" href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconexamplescanningforhrefs.asp">Scanning for HREFS</a> </span></dt><dd><font size="2">Provides an example that searches an input string and prints out all the href=&quot;...&quot; values and their locations in the string. </font></dd><dt><span class="style1"><a target="_blank" href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconexamplechangingdateformats.asp">Changing Date Formats</a> </span></dt><dd><font size="2">Provides an example that replaces dates of the form mm/dd/yy with dates of the form dd-mm-yy. </font></dd><dt><span class="style1"><a target="_blank" href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconexampleextractingurlinformation.asp">Extracting URL Information</a> </span></dt><dd><font size="2">Provides an example that extracts a protocol and port number from a string containing a URL. For example, &quot;http://www.contoso.com:8080/letters/readme.html&quot; returns &quot;http:8080&quot;. </font></dd><dt><span class="style1"><a target="_blank" href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconexamplecleaninginputstring.asp">Cleaning an Input String</a> </span></dt><dd><font size="2">provides an example that strips invalid non-alphanumeric characters from a string. </font></dd><dt><span class="style1"><a target="_blank" href="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconexampleconfirmingvalidemailformat.asp">Confirming Valid E-Mail Format</a> </span></dt><dd><font size="2">Provides an example that you can use to verify that a string is in valid e-mail format. </font></dd></dl></div></td></tr></tbody></table></base></p>]]></CONTEXT></PAGE><PAGE><TITLE>版权声明</TITLE><CONTEXT><![CDATA[<hr />
<span style="font-size: x-small"><span style="color: #99cc00"><span><span><strong><font face="Times New Roman"><span style="color: #0000ff"><span style="font-family: Times New Roman"><strong>XML</strong></span></span><span style="font-family: Times New Roman"><strong><font color="#000000"> </font><span style="color: #99cc00">BOOK</span><font color="#000000"> </font><span style="color: #ff0000">Editor <span style="color: #ff6600">App</span></span><font color="#000000">&nbsp;v.1.0.0</font></strong></span> </font></strong></span></span></span></span><span style="font-family: Arial">版权声明</span>
<hr />
<p><span>本软件是在 WndX 的基础上完成的。WndX 是由ONLYAA(Javascript经典专区)研制开发，未经&nbsp;ONLYAA 的授权许可不得擅自发布该软件。<br />
<br />
本软件所使用的编辑器FCKEditor是由&nbsp;<a href="http://www.fckeditor.net/">www.fckeditor.net</a>&nbsp;开发, 保留版权。<br />
警告: <font face="Times New Roman">请勿擅自修改版权和作者</font>。</span></p>
<p><span><span style="font-size: larger"><span style="font-family: Times New Roman"><span><strong><br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
</strong><strong>$ powered by <a href="http://onlyaa.com">Javascript 经典专区</a></strong></span></span></span><span style="color: #333333"><span style="color: #0000ff"><span style="color: #333300"><span style="font-size: larger"><span style="font-family: Times New Roman"><span><strong> All rights reservered.</strong></span></span></span></span></span></span></span><hr />
</p>]]></CONTEXT></PAGE><PAGE><TITLE>控件定制服务</TITLE><CONTEXT><![CDATA[<hr />
<span style="font-size: small"><span><span style="color: #99cc00"><strong><font face="Times New Roman"><span style="color: #0000ff"><span style="font-family: Times New Roman"><strong>J</strong><span style="color: #ff0000"><strong>avascript</strong></span></span></span></font></strong></span></span></span><span style="font-size: x-small"><span style="color: #99cc00"><span><span><strong><font face="Times New Roman"><span style="font-family: Times New Roman"><strong><font color="#000000">&nbsp;<span style="color: #99cc00">控件</span>定制服务说明</font></strong></span></font></strong></span></span></span></span>
<hr />
<p><span>本站是专业从事Javascript方面学习和研发站点，宗旨在于免费提供优秀的javascript组件/控件供大家学习参考。从建站到现在也已经有些日子了，在这些日子里，我们在不断的学习，不断的进步，不断的创新。随着知识经验的积累，完全有能力根据需求定制相应的javascript控件，同时也开始提供此类界面控件定制服务（这个根据复杂度需要收取一定的费用）。服务的内容如下：</span></p>
<table height="63" cellspacing="1" cellpadding="3" width="100%" border="0" style="font-size: 12px; background: #CCC;">
    <tbody>
        <tr bgcolor=blue style="color:white">
            <td>服务内容</td>
            <td>价格</td>
        </tr>
        <tr bgcolor=white>
            <td>单个Javascript控件，比如日期控件</td>
            <td>面议</td>
        </tr>
        <tr bgcolor=white>
            <td>基于浏览器软件的所有界面控件定制</td>
            <td>面议</td>
        </tr>
        <tr bgcolor=white>
            <td>Javascript控件交流学习</td>
            <td>免费</td>
        </tr>
        <tr bgcolor=white>
            <td colspan="2"><span style="color: #ff0000"><strong>备注：如果是完整项目时，为保证安全，可以电话咨询或者面谈。</strong></span></td>
        </tr>
    </tbody>
</table>
<p><span>关于费用的说明：</span></p>
<p><span>定制控件收取的费用纯属辛苦费，当然你也可以自己写，。希望能通过自己的劳动来维持网站的生存！</span>如果有需要可以email至 <span style="color: #99cc00">life.qm###gmail.com。</span> 或者加<span style="color: #99cc00">QQ3988592</span>，也欢迎学习交流朋友加<span style="color: #99cc00"><span style="font-size: large"><span style="font-family: Times New Roman">m<span>e</span></span></span></span>的QQ。<span><br />
<br />
</span></p>
<p>&nbsp;</p>
<p><span><span style="font-size: larger"><span style="font-family: Times New Roman"><span><strong><br />
<br />
<br />
<br />
<br />
</strong><strong>$ powered by <a href="http://onlyaa.com">Javascript 经典专区</a></strong></span></span></span><span style="color: #333333"><span style="color: #0000ff"><span style="color: #333300"><span style="font-size: larger"><span style="font-family: Times New Roman"><span><strong> All rights reservered.</strong></span></span></span></span></span></span></span></p>
<hr />]]></CONTEXT></PAGE></PAGES>
	<APPENDIX>附录</APPENDIX>
</XMLBOOK>
